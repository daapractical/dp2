def is_safe(board, row, col, n):
    for i in range(row):
        if board[i][col] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 1:
            return False
    return True

def print_solution(board):
    for i in range(n):
        for j in range(n):
            print("1" if board[i][j] == 1 else "0", end=" ")
        print()
    print()

def solve_n_queens(n):
    board = [[0] * n for _ in range(n)]
    def solve(row):
        if row == n:
            print("Solution:")
            print_solution(board)
            return True
        for col in range(n):
            if is_safe(board, row, col, n):
                board[row][col] = 1
                if solve(row + 1):
                    return True
                board[row][col] = 0
        return False
    if not solve(0):
        print("No solution exists for N =", n)
n = 4
solve_n_queens(n)
