def knapsack_dynamic_programming(values, weights, capacity):
    n = len(values)
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]
    for i in range(n + 1):
        for w in range(capacity + 1):
            if i == 0 or w == 0:
                dp[i][w] = 0
            elif weights[i - 1] <= w:
                dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]])
            else:
                dp[i][w] = dp[i - 1][w]
    max_value = dp[n][capacity]
    items = []
    w = capacity
    for i in range(n, 0, -1):
       if dp[i][w] != dp[i - 1][w]:
           items.append(i - 1)
           w -= weights[i - 1]
       return max_value, items
values = [60, 100, 120]
weights = [10, 20, 30]
capacity = 50
result, selected_items = knapsack_dynamic_programming(values, weights, capacity)
print("Results for Dynamic Programming :")
print("Maximum value:", result)
print("Selected items:", selected_items)
